@model Mimsv2.Models.FormModel
@{
    ViewData["Title"] = "Mims Incident Form";
}


@* @if (Model.AccessLevel == "admin")
{
    <div class="alert alert-success">Welcome Admin! Full access granted.</div>

}
else
{
    <p class="text-muted">Standard access - admin sections are hidden.</p>
 
} *@

@{
    var loginHospitalId = Context.Session.GetString("loginhospitalid");
}


<h3>New Incident Form</h3>
<p>
Incident Created, Captured and Reported by <b>@Context.Session.GetString("username") @Context.Session.GetString("surname")</b> <i>(@Context.Session.GetString("titles"))</i>
</p>




<form asp-action="IncidentFormInput" method="post" id="incidentForm" style="min-height:200vh;">
    <input type="hidden" asp-for="CapturedByLoginName" value="@Context.Session.GetString("loginname")" />
    <input type="hidden" asp-for="CapturedByName" value="@Context.Session.GetString("username")" />
    <input type="hidden" asp-for="CapturedBySurname" value="@Context.Session.GetString("surname")"/>
    <input type="hidden" asp-for="CapturedByTitle" value="@Context.Session.GetString("titles")" />
    <input type="hidden" asp-for="CapturedByEmail" value="@Context.Session.GetString("email")" />
    <input type="hidden" asp-for="HospitalId" />
    <input type="hidden" asp-for="CapturedbyDpt" value="@Context.Session.GetString("department")" />
    <input type="hidden" asp-for="active" value="Y" />
    <input type="hidden" asp-for="qarid" />


    <!-- Rest of the form goes here -->
    <section class="form_grid">
        <!-- SECTION A -->
        <div class="form_grid_item_span4">Section A: Incident Details</div>

        <div class="form_grid_item_span2">

            @if (Model.AccessLevel == "admin")
            {
                <label for="hospitalid">Hospital</label>
                <select class="form-control" asp-for="inserthospitalid " asp-items="Model.Hospitals" id="hospitalid">
                    <option value="" selected disabled>Please Select</option>
                </select>
                <span class="invalid-feedback" id="hospitalid-error">* Please select a Hospital</span>
            }else
            {
                var inserthospitalid = Context.Session.GetString("loginhospitalid");
                <label for="hospitalid">Hospital</label>
                <select class="form-control" asp-for="inserthospitalid" id="hospitalid">
                    <option value="@Model.hospitalid" selected>@Model.Hospital</option>
                </select>
            }
        </div>

        <div class="form_grid_item_span2">
            @if (Model.AccessLevel == "admin"){
                <label for="affectedward">Affected Ward</label>
                <select class="form-control" asp-for="affectedward" asp-items="Model.Departments" id="affectedward" disabled>
                    <option value="" selected disabled>Please Select</option>
                </select>
                <span id="" class="text-danger" style="display:none;"></span>
                <span class="invalid-feedback" id="affectedward-error">* Please select a Ward</span>
            }
            else
            {
                <label for="affectedward">Affected Ward</label>
                <select class="form-control" asp-for="affectedward" asp-items="Model.Departments" id="affectedward" data-selected="@Model.affectedward">
                    <option value="" selected disabled>Please Select</option>
                </select>
            }

        </div>
        <!-- SECTION A -->


        <!-- SECTION B -->
        <div class="form_grid_item_span4">Section B: Person Involved</div>

        <div class="form_grid_item">
            <label for="inctypescat1">Type of Incident</label>
            <select class="form-control" asp-for="pte" id="cat">
                <option value="" selected disabled>No Category</option>
            </select>
            <span id="cat-error" class="text-danger" style="display:none;">* Incident Type Required</span>
        </div>

        <div class="form_grid_item">
            <label for="inctypescat2">Incident</label>
            <select class="form-control" asp-for="incidenttype" id="subcat1" disabled>
                <option value="" selected disabled>Please select</option>
            </select>
        </div>

        <div class="form_grid_item">
            <label for="inctypescat3">Category</label>
            <select class="form-control" asp-for="inctypescat1" id="subcat2" disabled>
                <option value="" selected disabled>Please select</option>
            </select>
        </div>

        <div class="form_grid_item">
            <label for="inctypescat4">Sub Category</label>
            <select class="form-control" asp-for="inctypescat2" id="subcat3" disabled>
                <option value="" selected disabled>Please select</option>
            </select>
        </div>



@*         <div class="form_grid_item">
            <label for="ptenumber" id="ptenumberLabel">No Incident Selected</label><br />
            <input type="text" class="form-control" asp-for="ptenumber" id="ptenumberInput">
        </div> *@

        <div class="form_grid_item">
            <label for="ptenumber" id="ptenumberLabel">Patient Number</label><br />
            <input type="text" class="form-control" asp-for="ptenumber" id="ptenumberInput">

            <div id="incidentMatchNotice" style="margin-top: 5px; display: none;">
                <span style="color: orangered; font-weight: 500;">Incidents found within 6 months. </span>
                <button type="button" class="btn btn-sm btn-outline-primary" onclick="showIncidentModal()">Click to view</button>
            </div>
        </div>




        <div class="form_grid_item">
            <label for="ptenumber">First Name</label><br />
            <input type="text" class="form-control" asp-for="ptename" id="ptenameInput">
        </div>

        <div class="form_grid_item">
            <label for="ptesurname">Surname</label><br />
            <input type="text" class="form-control" asp-for="ptesurname" id="ptesurnameInput">
        </div>

        <div class="form_grid_item">
            <label for="ptetitle">Title</label>
            <select class="form-control" asp-for="ptetitle" id="ptetitleInput">
                <option value="">Title</option>
                <option>Mr</option>
                <option>Mrs</option>
                <option>Ms</option>
                <option>Miss</option>
                <option>Mast</option>
                <option>Mx</option>
                <option>Mz</option>
                <option>Dr</option>
                <option>Prof</option>
                <option>Hon</option>
                <option>Rev</option>
                <option>Other</option>
            </select>
        </div>


        <!---ADDENDUM UPLOADS--->
        <div class="form_grid_item_span2" >
            <div id="uploadButtonContainer" style="display:none; margin-top: 10px;">


                <div id="addendumUploadSection" style="margin-top: 10px;">
                    <label for="addendumType">Addendum Type</label>
                    <select class="form-control" id="addendumType" name="addendumType" onchange="toggleOtherInput()">
                        <option value="">Please select</option>
                        <option value="Prescription chart">1. Prescription chart</option>
                        <option value="Antibiotic stewardship chart">2. Antibiotic stewardship chart</option>
                        <option value="Clinical notes">3. Clinical notes</option>
                        <option value="Vital sign chart">4. Vital sign chart</option>
                        <option value="Other">5. Other</option>
                    </select>

                    <input type="text" id="otherAddendumText" name="otherAddendum" style="display:none; margin-top:10px;" class="form-control" placeholder="Please specify" />

                    <input type="file" id="uploadAddendum" name="addendumFile" class="form-control mt-2" />

                    <button type="button" class="btn btn-success mt-2" onclick="uploadAddendumFile()">Upload Addendum</button>


                </div>

            </div>

        </div>

        <div class="form_grid_item_span2">
            <div id="uploadedFilesContainer" class="mt-3"></div>
        </div>
        <!---ADDENDUM UPLOADS--->


        <!-- SECTION B END -->

        <!-- SECTION C -->
        <div class="form_grid_item_span4">Section C: When It Occurred</div>

        <div class="form_grid_item">
            <label for="priority">Severity</label>
            <select class="form-control" asp-for="priority" id="priority">
                <option value="" selected disabled>Please Select</option>
                <option value="Minor">Minor</option>
                <option value="Moderate">Moderate</option>
                <option value="Major">Major</option>
            </select>
            <span class="invalid-feedback" id="priority-error">Please select a priority.</span>
        </div>

        <div class="form_grid_item">
            <label for="incidentdate">Incident Date</label><br />
            <input type="date" class="form-control" asp-for="incidentdate" id="incidentdate">
            <span class="invalid-feedback" id="incidentdate-error">* Incident Date Required</span>
        </div>
        <div class="form_grid_item">
            <label for="incidenttime">Incident Time</label><br />
            <input type="time" class="form-control" asp-for="incidenttime" id="incidenttime">
            <span class="invalid-feedback" id="incidenttime-error">* Incident Time Required</span>
        </div>

        <div class="form_grid_item">
            <label for="datereported">Incident Date Reported</label><br />
            <input type="date" class="form-control" asp-for="datereported" id="datereported">
            <span class="invalid-feedback" id="datereported-error">* Date Reported Required</span>
        </div>


        @if (Model.AccessLevel == "admin")
        {
            <div class="form_grid_item">
                <label for="invesitgatedby">Investigated By</label>
                <select class="form-control" asp-for="invesitgatedby" id="invesitgatedby" disabled>
                    <option value="" selected disabled>Please Select</option>
                </select>
                <span class="invalid-feedback" id="invesitgatedby-error">* Required Field</span>
            </div>

            <div class="form_grid_item">
                <label for="Name">Name</label><br />
                <input type="text" class="form-control" name="InvName" id="Name" readonly>

            </div>

            <div class="form_grid_item">
                <label for="Surname">Surname</label><br />
                <input type="text" class="form-control" name="InvSurname" id="Surname" readonly>

            </div>

            <div class="form_grid_item">
                <label for="Email">Email</label><br />
                <input type="text" class="form-control" id="Email" readonly>

            </div>

        }
        else
        {
            <div class="form_grid_item">
                <label for="invesitgatedby">Investigated By</label>
                <select class="form-control" asp-for="invesitgatedby" id="invesitgatedby" data-selected="@Model.invesitgatedby">
                    <option value="" selected disabled>Please Select</option>
                </select>
                <span class="invalid-feedback" id="invesitgatedby-error">* Required Field</span>
            </div>

            <div class="form_grid_item">
                <label for="Name">Name</label><br />
                <input type="text" class="form-control" name="InvName" id="Name" readonly>

            </div>

            <div class="form_grid_item">
                <label for="Surname">Surname</label><br />
                <input type="text" class="form-control" name="InvSurname" id="Surname" readonly>

            </div>

            <div class="form_grid_item">
                <label for="Email">Email</label><br />
                <input type="text" class="form-control" id="Email" readonly>

            </div>


        }



        <!-- SECTION D -->
        <div class="form_grid_item_span4">Section D: Staff Category </div>

        <div class="form_grid_item">
            <label for="dptSelect">Staff Department</label>
            <select class="form-control" asp-for="assignedcat" id="dptSelect">
                <option value="">Please Select</option>
            </select>
            <span class="invalid-feedback" id="dptSelect-error">* Required Field</span>
        </div>

        <div class="form_grid_item">
            <label for="dptDetails">Staff Category</label>
            <select class="form-control" asp-for="assignedstaff" id="dptDetails">
                <option value="">Please Select</option>
            </select>
            <span class="invalid-feedback" id="dptDetails-error">* Required Field</span>
        </div>

        <div class="form_grid_item">
            <div class="form-check"><br />

                <input type="checkbox" asp-for="IsDayShift" class="form_check" id="isDayShift" />
                <label for="isDayShift">Day Shift</label>
            </div>
        </div>

        <div class="form_grid_item">
            <div class="form-check"><br />
                <input type="checkbox" asp-for="IsNightShift" class="form_check" id="IsNightShift" />
                <label for="IsNightShift">Night Shift</label>

            </div>
        </div>


        <div class="form_grid_item_span4">Section E: Describe the Incident </div>


        <div class="form_grid_item_span2">
            <label>Short Initial Description</label><br>
            <div id="descriptionCount" class="text-muted small">0 / 300 characters</div>
            <textarea asp-for="description" class="form_textarea" id="descriptionInput" spellcheck="true" maxlength="300"></textarea>
        </div>

        <div class="form_grid_item_span2" style="padding-left:20px;font-size:1rem;">
           
        </div>

       
        <div class="form_grid_item_span4">Section F: Call to Action </div>


        <div class="form_grid_item_span3_nc">
            <label>Corrective Action</label><br>
            <textarea asp-for="correctaction" class="form_textarea" id="correctaction"></textarea>
            <br />
            <label>Preventative Action</label><br>
            <textarea asp-for="preventaction" class="form_textarea" id="preventaction"></textarea>
        </div>

        <div class="form_grid_item">
            <b>Status</b><br />
            Open: &nbsp;&nbsp;<input type="radio" name="status" value="open" class="form_radio" onclick="textAreaShow5('none');textAreaShow4('none');" checked>
                 
        </div>

        <div class="form_grid_item_span3_nc">
            <div class="form_grid_item_span4_nc" id="textArea4" style="display:none;">
                <label>Brief Description as to why the Incident is being put on hold.</label><br>
                <textarea asp-for="onholddesc" class="form_textarea" id="onholddesc"></textarea>
                <input type="hidden" asp-for="onholddescdate" value="@DateTime.Now.ToString("yyyy-MM-dd")" />
                <input type="text" asp-for="onholddesctime" value="@DateTime.Now.ToString("HH:mm")"  />
            </div>
        </div>

        <div class="grid_item"></div>

        <div class="form_grid_item_span3_nc">
            <div class="form_grid_item_span4_nc" id="textArea5" style="display:none;">
                <label>Closing Description.</label><br>
                <textarea asp-for="closeddesc" class="form_textarea" id="closeddesc"></textarea>
                <input type="hidden" asp-for="closeddescdate" value="@DateTime.Now.ToString("yyyy-MM-dd")" />
                <input type="text" asp-for="closeddesctime" value="@DateTime.Now.ToString("HH:mm")" />
            </div>
        </div>

        <div class="grid_item"></div>



        <div class="form_grid_item_span4_nc">

        </div>

        <script>
            function textAreaShow1(onOff) {
            document.getElementById('textArea1').style.display = onOff;
            }

            function textAreaShow2(onOff) {
            document.getElementById('textArea2').style.display = onOff;
            }

            function textAreaShow3(onOff) {
            document.getElementById('textArea3').style.display = onOff;
            }

            function textAreaShow4(onOff) {
            document.getElementById('textArea4').style.display = onOff;
            }

            function textAreaShow5(onOff) {
            document.getElementById('textArea5').style.display = onOff;
            }
        </script>

      
        <div class="form_grid_item_span4_nc">

			<button type="submit" class="btn btn-primary mt-4">Next to Continue</button>
        </div>

    </section>
   
</form>

<div id="summernote"></div>

<!--Modal to check--->
<div class="modal fade" id="similarIncidentsModal" tabindex="-1" aria-labelledby="similarIncidentsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title" id="similarIncidentsModalLabel">⚠️ Similar Incidents Found in the last 6 months</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="modal-incident-body">
                <!-- Filled by JS -->
            </div>
        </div>
    </div>
</div>

<script>
    let incidentModalInstance;
    let similarIncidents = [];

    document.addEventListener("DOMContentLoaded", function () {
        const modalEl = document.getElementById("similarIncidentsModal");
        if (modalEl) {
            incidentModalInstance = new bootstrap.Modal(modalEl);
        }

        const pteInput = document.getElementById("ptenumberInput");
        if (pteInput) {
            pteInput.addEventListener("blur", () => {
                checkSimilarIncidents();
            });
        }
    });

    async function checkSimilarIncidents() {
        const ptenumber = document.getElementById("ptenumberInput")?.value || "";
        const description = document.getElementById("descriptionInput")?.value || "";
        const hospitalid = document.getElementById("hospitalid")?.value || "";

        // Skip if hospital not selected (admin case)
        if (!hospitalid) return;

        // Also skip if both fields are empty
        if (!ptenumber && !description) return;

        const query = new URLSearchParams({
            ptenumber,
            description,
            hospitalid
        }).toString();

        const res = await fetch(`/Form/CheckSimilarIncidents?${query}`);
        const results = await res.json();
        similarIncidents = results;

        const notice = document.getElementById("incidentMatchNotice");
        if (results.length > 0 && notice) {
            notice.style.display = "block";
        } else if (notice) {
            notice.style.display = "none";
        }
    }

    function showIncidentModal() {
        if (similarIncidents.length > 0) {
            let html = "";
            similarIncidents.forEach(r => {
                html += `
                    <div class="mb-3">
                        <strong>PTE:</strong> ${r.ptenum}<br>
                        <strong>Date:</strong> ${r.date}<br>
                        <strong>Type:</strong> ${r.type}<br>
                        <strong>Description:</strong> ${r.desc}<br>
                        <strong>QARID:</strong> ${r.qarid}
                        <hr>
                    </div>
                `;
            });

            document.getElementById("modal-incident-body").innerHTML = html;
            incidentModalInstance?.show();
        }
    }
</script>





<!--Modal to check--->


@* <!---SECTION A---> *@
@section Scripts {

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const hospitalSelect = document.getElementById("hospitalid");
            const wardSelect = document.getElementById("affectedward");

            function loadDepartments(hospitalId) {
                if (!hospitalId) return;

                wardSelect.disabled = false;
                wardSelect.innerHTML = '<option value="">Please Select</option>';

                fetch(`/Form/GetDepartmentsByHospital?hospitalId=${hospitalId}`)
                    .then(res => res.json())
                    .then(data => {
                        data.forEach(dept => {
                            const opt = document.createElement("option");
                            opt.value = dept.value;
                            opt.text = dept.text;
                            wardSelect.appendChild(opt);
                        });

                        // Optional: reselect if editing
                        const selectedWard = wardSelect.getAttribute("data-selected");
                        if (selectedWard) {
                            wardSelect.value = selectedWard;
                        }
                    })
                    .catch(err => {
                        console.error("Failed to load departments", err);
                    });
            }

            //  For admins: trigger on change
            hospitalSelect.addEventListener("change", function () {
                loadDepartments(this.value);
            });

            //  For everyone: trigger on page load if value exists
            if (hospitalSelect.value) {
                loadDepartments(hospitalSelect.value);
            }
        });
    </script>



@* <!---SECTION B---> *@
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const cat = document.getElementById("cat");
        const sub1 = document.getElementById("subcat1");
        const sub2 = document.getElementById("subcat2");
        const sub3 = document.getElementById("subcat3");

        // Load Categories
        fetch("/Form/GetIncidentCategories")
            .then(res => res.json())
            .then(data => {
                data.forEach(item => {
                    cat.append(new Option(item.text, item.value));
                });
            });

        cat.addEventListener("change", function () {
            sub1.disabled = true;
            sub1.innerHTML = '<option value="">Please select</option>';

            if (this.value) {
                fetch(`/Form/GetSubCategory1?cat=${this.value}`)
                    .then(res => res.json())
                    .then(data => {
                        sub1.disabled = false;
                        data.forEach(item => {
                            sub1.append(new Option(item.text, item.value));
                        });
                    });
            }
        });

        sub1.addEventListener("change", function () {
            sub2.disabled = true;
            sub2.innerHTML = '<option value="">Please select</option>';

            if (this.value) {
                fetch(`/Form/GetSubCategory2?sub1=${this.value}`)
                    .then(res => res.json())
                    .then(data => {
                        sub2.disabled = false;
                        data.forEach(item => {
                            sub2.append(new Option(item.text, item.value));
                        });
                    });
            }
        });

        sub2.addEventListener("change", function () {
            sub3.disabled = true;
            sub3.innerHTML = '<option value="">Please select</option>';

            if (this.value) {
                fetch(`/Form/GetSubCategory3?sub2=${this.value}`)
                    .then(res => res.json())
                    .then(data => {
                        sub3.disabled = false;
                        data.forEach(item => {
                            sub3.append(new Option(item.text, item.value));
                        });
                    });
            }
        });
    });
</script>


    <script>
        $(document).ready(function () {

          function loadSubCategory(level, selectedValue, targetDropdownId, selectedOption = "") {
            const $dropdown = $(`#${targetDropdownId}`);

            if (!selectedValue) {
                $dropdown.html('<option value="">No category</option>').prop('disabled', true);
                return;
            }

            let endpoint = "";

            if (level === 1) endpoint = "/Form/GetSubCategory1";
            else if (level === 2) endpoint = "/Form/GetSubCategory2";
            else if (level === 3) endpoint = "/Form/GetSubCategory3";

            $.ajax({
                url: endpoint,
                type: 'GET',
                data: level === 1
                    ? { cat: selectedValue }
                    : level === 2
                        ? { sub1: selectedValue }
                        : { sub2: selectedValue },
                success: function (data) {
                    if (data.length > 0) {
                        let options = '<option value="">Please select</option>';
                        data.forEach(function (item) {
                            const isSelected = item.value === selectedOption ? 'selected' : '';
                            options += `<option value="${item.value}" ${isSelected}>${item.text}</option>`;
                        });
                        $dropdown.html(options).prop('disabled', false);
                    } else {
                        $dropdown.html('<option value="">No category</option>').prop('disabled', true);
                    }
                },
                error: function () {
                    alert("Failed to load subcategories");
                    $dropdown.html('<option value="">No category</option>').prop('disabled', true);
                }
            });
        }



            // === Event Handlers for Dropdown Changes ===
            $('#cat').change(function () {
                const cat = $(this).val();


        // update label dynamically
        if (!cat || cat === 'No Category') {
            // Disable input and set default label
            $('#ptenumberInput').val('').prop('disabled', true);
            $('#ptenameInput').val('').prop('disabled', true);
            $('#ptesurnameInput').val('').prop('disabled', true);
            $('#ptetitleInput').val('').prop('disabled', true);
            $('#ptenumberLabel').text("No Incident Selected");
        } else {
            // Enable input
            $('#ptenumberInput').prop('disabled', false);
            $('#ptenameInput').prop('disabled', false);
            $('#ptesurnameInput').prop('disabled', false);
            $('#ptetitleInput').prop('disabled', false);

            // Set label according to category
            if (cat === "Patient") {
                $('#ptenumberLabel').text("Clinic Manager Patient Number");
            } else if (cat === "Employee") {
                $('#ptenumberLabel').text("Employee Number");
            } else if (cat === "Visitor" || cat === "Customer") {
                $('#ptenumberLabel').text("Location");
            } else if (cat === "Supplier / Service Provider") {
                $('#ptenumberLabel').text("Company Name");
            } else if (cat === "Doctor / Practitioner") {
                $('#ptenumberLabel').text("Practice?");
            } else if (cat === "Property / Environment") {
                $('#ptenumberLabel').text("Injured/Affected Person (Environment)");
            } else {
                $('#ptenumberLabel').text("Please Select");
            }
        }

                loadSubCategory(1, cat, 'subcat1');
                $('#subcat2').html('<option value="">No Category</option>');
                $('#subcat3').html('<option value="">No Category</option>');
            });

            $('#subcat1').change(function () {
                const subcat1 = $(this).val();
                loadSubCategory(2, subcat1, 'subcat2');
                $('#subcat3').html('<option value="">No Category</option>');
            });

            $('#subcat2').change(function () {
                const subcat2 = $(this).val();
                loadSubCategory(3, subcat2, 'subcat3');
            });

            // === Preload for Edit ===
            const selectedCat = '@Model.inctypescat1';
            const selectedSub1 = '@Model.inctypescat2';
            const selectedSub2 = '@Model.inctypescat3';
            const selectedSub3 = '@Model.inctypescat4';

            if (selectedCat) {
                $('#cat').val(selectedCat);
                loadSubCategory(1, selectedCat, 'subcat1', selectedSub1);
            }

            if (selectedSub1) {
                loadSubCategory(2, selectedSub1, 'subcat2', selectedSub2);
            }

            if (selectedSub2) {
                loadSubCategory(3, selectedSub2, 'subcat3', selectedSub3);
            }

        if (!selectedCat || selectedCat === 'No Category') {
            $('#ptenumberInput').val('').prop('disabled', true);
            $('#ptenameInput').val('').prop('disabled', true);
            $('#ptesurnameInput').val('').prop('disabled', true);
            $('#ptetitleInput').val('').prop('disabled', true);
            $('#ptenumberLabel').text("No Incident Selected");
        } else {
            $('#ptenumberInput').prop('disabled', false);
            $('#ptenameInput').prop('disabled', false);
            $('#ptesurnameInput').prop('disabled', false);
            $('#ptetitleInput').prop('disabled', false);

            if (selectedCat === "Patient") {
                $('#ptenumberLabel').text("Clinic Manager Patient Number");
            } else if (selectedCat === "Employee") {
                $('#ptenumberLabel').text("Employee Number");
            } else if (selectedCat === "Visitor" || selectedCat === "Customer") {
                $('#ptenumberLabel').text("Location");
            } else if (selectedCat === "Supplier / Service Provider") {
                $('#ptenumberLabel').text("Company Name");
            } else if (selectedCat === "Doctor / Practitioner") {
                $('#ptenumberLabel').text("Practice?");
            } else if (selectedCat === "Property / Environment") {
                $('#ptenumberLabel').text("Injured/Affected Person (Environment)");
            } else {
                $('#ptenumberLabel').text("No Incident Selected");
            }
        }
        });
    </script>


@* //SECTION C *@

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const hospitalSelect = document.getElementById("hospitalid");
            const investigatedBySelect = document.getElementById("invesitgatedby");

            function loadInvestigators(hospitalId) {
                if (!hospitalId) return;

                investigatedBySelect.disabled = false;
                investigatedBySelect.innerHTML = '<option value="">Please Select</option>';

                fetch(`/Form/GetInvestigators?hospitalId=${hospitalId}`)
                    .then(res => res.json())
                    .then(data => {
                        data.forEach(user => {
                            const opt = document.createElement("option");
                            opt.value = user.value;
                            opt.text = user.text;
                            investigatedBySelect.appendChild(opt);
                        });

                        // Reselect previously selected value (if any)
                        const selectedInvestigator = investigatedBySelect.getAttribute("data-selected");
                        if (selectedInvestigator) {
                            investigatedBySelect.value = selectedInvestigator;
                            investigatedBySelect.dispatchEvent(new Event('change')); // Trigger detail fetch
                        }
                    })
                    .catch(err => {
                        console.error("Failed to load investigators", err);
                    });
            }

            // 🔁 Admin: manual change
            hospitalSelect.addEventListener("change", function () {
                loadInvestigators(this.value);
            });

            // 🧠 Everyone: fire on load if value exists
            if (hospitalSelect.value) {
                loadInvestigators(hospitalSelect.value);
            }

            // Investigator details fetch
            investigatedBySelect.addEventListener("change", function () {
                const loginname = this.value;

                if (loginname) {
                    fetch(`/Form/GetInvestigatorDetails?loginname=${loginname}`)
                        .then(res => res.json())
                        .then(data => {
                            if (data) {
                                document.getElementById('Name').value = data.username || '';
                                document.getElementById('Surname').value = data.surname || '';
                                document.getElementById('Email').value = data.email || '';
                            } else {
                                document.getElementById('Name').value = '';
                                document.getElementById('Surname').value = '';
                                document.getElementById('Email').value = '';
                            }
                        })
                        .catch(() => {
                            document.getElementById('Name').value = '';
                            document.getElementById('Surname').value = '';
                            document.getElementById('Email').value = '';
                        });
                } else {
                    document.getElementById('Name').value = '';
                    document.getElementById('Surname').value = '';
                    document.getElementById('Email').value = '';
                }
            });
        });
    </script>



@* SECTION D *@

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dptSelect = document.getElementById("dptSelect");
            const dptDetails = document.getElementById("dptDetails");

            // Load department list from DB
            fetch("/Form/GetEmp")
                .then(res => res.json())
                .then(data => {
                    data.forEach(item => {
                        const opt = document.createElement("option");
                        opt.value = item.value;
                        opt.text = item.text;
                        dptSelect.appendChild(opt);
                    });
                });

            // On department selection change
            dptSelect.addEventListener("change", function () {
                const selectedDpt = this.value;

                // Clear and disable second dropdown
                dptDetails.innerHTML = '<option value="">Please Select</option>';
                dptDetails.disabled = true;

                if (!selectedDpt) return;

                // Get staff categories for selected department
                fetch(`/Form/GetEmpDetails?dpt=${encodeURIComponent(selectedDpt)}`)
                    .then(res => res.json())
                    .then(data => {
                        if (Array.isArray(data) && data.length > 0) {
                            data.forEach(item => {
                                const opt = document.createElement("option");
                                opt.value = item.value;
                                opt.text = item.text;
                                dptDetails.appendChild(opt);
                            });
                            dptDetails.disabled = false;
                        }
                    })
                    .catch(err => {
                        console.error("Error fetching staff categories:", err);
                    });
            });
        });
    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const subcat1 = document.getElementById('subcat1');
            const uploadContainer = document.getElementById('uploadButtonContainer');

            if (!subcat1 || !uploadContainer) return;

            const checkValue = () => {
                const selectedVal = subcat1.options[subcat1.selectedIndex]?.text?.trim().toLowerCase();
                if (selectedVal === 'falling') {
                    uploadContainer.style.display = 'block';
                } else {
                    uploadContainer.style.display = 'none';
                }
            };

            // In case you're enabling it dynamically
            subcat1.addEventListener('change', checkValue);

            // Optional: check once after delay (for dynamically loaded data)
            setTimeout(checkValue, 500);
        });
    </script>


    <script>
        document.getElementById("addendumType").addEventListener("change", function () {
            const selected = this.value;
            document.getElementById("otherAddendumText").style.display = selected === "Other" ? "block" : "none";
        });
    </script>


    <script>
        function toggleOtherInput() {
            const addendumType = document.getElementById("addendumType").value;
            const otherInput = document.getElementById("otherAddendumText");
            otherInput.style.display = (addendumType === "Other") ? "block" : "none";
        }
    </script>



    <script>

        let uploadedFilenames = [];

        function uploadAddendumFile() {
            const fileInput = document.getElementById('uploadAddendum');
            const file = fileInput.files[0];
            const criteria = document.getElementById('subcat1').value;
            let addendumType = document.getElementById('addendumType').value;

            // Handle "Other" case
            if (addendumType === "Other") {
                const otherText = document.getElementById('otherAddendumText').value.trim();
                if (!otherText) {
                    alert("Please specify the 'Other' addendum type.");
                    return;
                }
                addendumType = otherText;
            }

            if (!file || !criteria || !addendumType) {
                alert("Please complete all fields before uploading.");
                return;
            }

            const formData = new FormData();
            formData.append("addendumFile", file);
            formData.append("criteria", criteria);
            formData.append("addendumType", addendumType);

            fetch('/Form/UploadAddendum', {
                method: 'POST',
                body: formData
            })
            .then(async response => {
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error("Upload failed: " + errorText);
                }
                return response.json();
            })
            .then(data => {
                alert(data.message);


                //HERE NA
                uploadedFilenames.push(data.attachment);

                //  Append to uploaded file list using returned attachment name
                const fileList = document.getElementById('uploadedFilesContainer');
                const item = document.createElement('div');
                item.classList.add('uploaded-file-item');
                item.innerHTML = `
                    <div style="margin-bottom: 5px;">
                        <strong>${addendumType}</strong> -
                        (Criteria: ${criteria})
                        <button type="button" class="btn btn-sm btn-danger ms-2" onclick="deleteAddendum('${data.attachment}')">Delete</button>
                        <span style="color:green;">Uploaded</span>
                    </div>
                `;
                fileList.appendChild(item);

                // Clear inputs
                fileInput.value = "";
                document.getElementById('addendumType').value = "";
                document.getElementById('otherAddendumText').value = "";
                document.getElementById('otherAddendumText').style.display = 'none';
            })
            .catch(err => {
                alert("Error uploading file: " + err.message);
            });
        }
    </script>



    <script>
        function deleteAddendum(attachment) {
            if (!confirm("Are you sure you want to delete this addendum?")) return;

            const formData = new FormData();
            formData.append("attachment", attachment);

            fetch('/Form/DeleteAddendum', {
                method: 'POST',
                body: formData
            })
            .then(async response => {
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText);
                }
                return response.text();
            })
            .then(message => {
                alert(message);

                //  Remove the item from DOM
                const items = document.querySelectorAll('.uploaded-file-item');
                for (const item of items) {
                    if (item.innerHTML.includes(attachment)) {
                        item.remove();
                        break;
                    }
                }
            })
            .catch(err => {
                alert("Error deleting file: " + err.message);
            });
        }
    </script>



    <script>
        document.addEventListener("DOMContentLoaded", function() {
          const form = document.getElementById("incidentForm");

          form.addEventListener("submit", function(event) {
            // Remove any existing hidden inputs to avoid duplicates
            const existingInputs = form.querySelectorAll('input[name="UploadedFiles"]');
            existingInputs.forEach(input => input.remove());

            // Grab all uploaded filenames from the uploaded files container
            const uploadedFilesContainer = document.getElementById('uploadedFilesContainer');
            if (!uploadedFilesContainer) return; // safety check

            const uploadedItems = uploadedFilesContainer.querySelectorAll('.uploaded-file-item');
            uploadedItems.forEach(item => {
              // We store the filename in the button's onclick attribute, let's extract it
              // The delete button onclick looks like: onclick="deleteAddendum('filename')"
              const deleteBtn = item.querySelector('button.btn-danger');
              if (!deleteBtn) return;

              // Extract filename from onclick attribute
              const onclickAttr = deleteBtn.getAttribute('onclick');
              const match = onclickAttr.match(/deleteAddendum\('([^']+)'\)/);
              if (match && match[1]) {
                const filename = match[1];

                // Create hidden input with the filename
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'UploadedFiles';  // This should match your FormModel List<string> property name
                hiddenInput.value = filename;

                form.appendChild(hiddenInput);
              }
            });
          });
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
          const form = document.getElementById("incidentForm");

          form.addEventListener("submit", function(event) {
            // Remove any existing hidden inputs to avoid duplicates
            const existingInputs = form.querySelectorAll('input[name="UploadedFiles"]');
            existingInputs.forEach(input => input.remove());

            // Grab all uploaded filenames from the uploaded files container
            const uploadedFilesContainer = document.getElementById('uploadedFilesContainer');
            if (!uploadedFilesContainer) return; // safety check

            const uploadedItems = uploadedFilesContainer.querySelectorAll('.uploaded-file-item');
            uploadedItems.forEach(item => {
              // We store the filename in the button's onclick attribute, let's extract it
              // The delete button onclick looks like: onclick="deleteAddendum('filename')"
              const deleteBtn = item.querySelector('button.btn-danger');
              if (!deleteBtn) return;

              // Extract filename from onclick attribute
              const onclickAttr = deleteBtn.getAttribute('onclick');
              const match = onclickAttr.match(/deleteAddendum\('([^']+)'\)/);
              if (match && match[1]) {
                const filename = match[1];

                // Create hidden input with the filename
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'UploadedFiles';  // This should match your FormModel List<string> property name
                hiddenInput.value = filename;

                form.appendChild(hiddenInput);
              }
            });
          });
        });
    </script>



    <script>
        document.addEventListener("DOMContentLoaded", function () {
            fetch('/Form/GetEmp') // adjust controller name in the URL
                .then(response => response.json())
                .then(data => {
                    const dptSelect = document.getElementById("dptSelect");
                    dptSelect.innerHTML = '<option value="">Please Select</option>'; // clear existing
                    data.forEach(item => {
                        const option = new Option(item.text, item.value);
                        dptSelect.appendChild(option);
                    });

                    // Optionally set the selected value from the model if it's edit mode
                    const selectedValue = '@Model.assignedcat';
                    if (selectedValue) {
                        dptSelect.value = selectedValue;
                    }
                });
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dptSelect = document.getElementById("dptSelect");
            const dptDetails = document.getElementById("dptDetails");

            // Load departments initially
            fetch('/Form/GetEmp') // replace with actual controller
                .then(response => response.json())
                .then(data => {
                    dptSelect.innerHTML = '<option value="">Please Select</option>';
                    data.forEach(item => {
                        const option = new Option(item.text, item.value);
                        dptSelect.appendChild(option);
                    });

                    // Set selected value if editing
                    const selectedDept = '@Model.assignedcat';
                    if (selectedDept) {
                        dptSelect.value = selectedDept;
                        dptSelect.dispatchEvent(new Event('change')); // trigger cascade
                    }
                });

            // Load staff categories based on selected department
            dptSelect.addEventListener("change", function () {
                const selectedDept = this.value;
                if (!selectedDept) {
                    dptDetails.innerHTML = '<option value="">Please Select</option>';
                    return;
                }

                fetch(`/Form/GetEmpDetails?dpt=${encodeURIComponent(selectedDept)}`)
                    .then(response => response.json())
                    .then(data => {
                        dptDetails.innerHTML = '<option value="">Please Select</option>';
                        data.forEach(item => {
                            const option = new Option(item.text, item.value);
                            dptDetails.appendChild(option);
                        });

                        // Set selected staff if editing
                        const selectedStaff = '@Model.assignedstaff';
                        if (selectedStaff) {
                            dptDetails.value = selectedStaff;
                        }
                    });
            });
        });
    </script>


    <script>
        document.getElementById("incidentForm").addEventListener("submit", function (e) {
            let formIsValid = true;
            let firstErrorElement = null;

            const fields = [
                { id: "hospitalid", errorId: "hospitalid-error" },
                { id: "affectedward", errorId: "affectedward-error" },
                { id: "cat", errorId: "cat-error" },
                { id: "priority", errorId: "priority-error" },
                { id: "incidentdate", errorId: "incidentdate-error" },
                { id: "incidenttime", errorId: "incidenttime-error" },
                { id: "datereported", errorId: "datereported-error" },
                { id: "invesitgatedby", errorId: "invesitgatedby-error" },
                { id: "dptSelect", errorId: "dptSelect-error" },
                { id: "dptDetails", errorId: "dptDetails-error" }
            ];

            fields.forEach(field => {
                const input = document.getElementById(field.id);
                const error = document.getElementById(field.errorId);

                if (!input || input.value.trim() === "") {
                    input.classList.add("is-invalid");
                    error.style.display = "block";
                    formIsValid = false;
                    if (!firstErrorElement) firstErrorElement = input;
                } else {
                    input.classList.remove("is-invalid");
                    error.style.display = "none";
                }
            });

            if (!formIsValid) {
                e.preventDefault(); // stop submission
                firstErrorElement.scrollIntoView({ behavior: "smooth", block: "center" });
                firstErrorElement.focus();
            }
        });

        // Real-time clearing of errors
        ["hospitalid", "affectedward", "cat", "priority","incidentdate","incidenttime","datereported","invesitgatedby","dptSelect","dptDetails"].forEach(id => {
            const input = document.getElementById(id);
            input?.addEventListener("change", () => {
                input.classList.remove("is-invalid");
                const error = document.getElementById(`${id}-error`);
                error.style.display = "none";
            });
        });
    </script>

}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const textarea = document.getElementById('descriptionInput');
        const counter = document.getElementById('descriptionCount');
        const maxLength = 300;

        textarea.addEventListener('input', function () {
            let content = textarea.value;

            // Trim if pasted content exceeds max length
            if (content.length > maxLength) {
                textarea.value = content.substring(0, maxLength);
                content = textarea.value;
            }

            const length = content.length;
            counter.textContent = `${length} / ${maxLength} characters`;

            // Optional: turn red if limit reached
            if (length >= maxLength) {
                counter.classList.add('text-danger');
                counter.textContent += ' (limit reached)';
            } else {
                counter.classList.remove('text-danger');
            }
        });

        // Trigger count on page load if textarea has value
        textarea.dispatchEvent(new Event('input'));
    });
</script>
